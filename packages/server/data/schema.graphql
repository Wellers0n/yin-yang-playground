schema {
  query: QueryType
  mutation: MutationType
}

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type MutationType {
  UserLoginMutation(input: UserLoginInput!): UserLoginPayload
  UserRegisterMutation(input: userRegisterInput!): userRegisterPayload
  UserDeleteMutation(input: UserDeleteInput!): UserDeletePayload
  UserUpdateMutation(input: UserUpdateInput!): UserUpdatePayload
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Get users[], user and me"""
type QueryType {
  me: User
  user(id: String): User
  users(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection
}

"""User data"""
type User {
  """The ID of an object"""
  id: ID!
  _id: ID
  name: String
  email: String
  password: String
  description: String
}

"""A connection to a list of items."""
type UserConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [UserEdge]!
}

input UserDeleteInput {
  id: String!
  clientMutationId: String
}

type UserDeletePayload {
  users: [User]
  message: String
  clientMutationId: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}

input UserLoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  message: String
  clientMutationId: String
}

input userRegisterInput {
  name: String!
  email: String!
  password: String!
  description: String!
  clientMutationId: String
}

type userRegisterPayload {
  userEdge: UserEdge
  message: String
  error: Boolean
  token: String
  clientMutationId: String
}

input UserUpdateInput {
  id: String!
  name: String!
  description: String!
  email: String!
  clientMutationId: String
}

type UserUpdatePayload {
  users: [User]
  message: String
  clientMutationId: String
}
